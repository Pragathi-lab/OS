#include <stdio.h>

#define MAX 10

typedef struct {
    int id, burst_time, priority, waiting_time, turnaround_time, remaining_time;
} Process;

void priorityScheduling(Process processes[], int n) {
    int i, j, total_wt = 0, total_tat = 0;
    Process temp;

    // Sorting by priority (lower value = higher priority)
    for (i = 0; i < n - 1; i++) {
        for (j = i + 1; j < n; j++) {
            if (processes[i].priority > processes[j].priority) {
                temp = processes[i];
                processes[i] = processes[j];
                processes[j] = temp;
            }
        }
    }

    processes[0].waiting_time = 0;

    for (i = 1; i < n; i++) {
        processes[i].waiting_time = processes[i - 1].waiting_time + processes[i - 1].burst_time;
        total_wt += processes[i].waiting_time;
    }

    for (i = 0; i < n; i++) {
        processes[i].turnaround_time = processes[i].waiting_time + processes[i].burst_time;
        total_tat += processes[i].turnaround_time;
    }

    printf("\nPriority Scheduling:\n");
    printf("ID  Priority  BT  WT  TAT\n");
    for (i = 0; i < n; i++) {
        printf("%d   %d         %d   %d   %d\n", processes[i].id, processes[i].priority,
               processes[i].burst_time, processes[i].waiting_time, processes[i].turnaround_time);
    }

    printf("\nAvg Waiting Time: %.2f\n", (float)total_wt / n);
    printf("Avg Turnaround Time: %.2f\n", (float)total_tat / n);
}

void roundRobin(Process processes[], int n, int quantum) {
    int time = 0, i, done, total_wt = 0, total_tat = 0;

    for (i = 0; i < n; i++)
        processes[i].remaining_time = processes[i].burst_time;

    printf("\nRound Robin (Quantum = %d):\n", quantum);
    printf("ID  WT  TAT\n");

    do {
        done = 1;
        for (i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0) {
                done = 0;
                if (processes[i].remaining_time > quantum) {
                    time += quantum;
                    processes[i].remaining_time -= quantum;
                } else {
                    time += processes[i].remaining_time;
                    processes[i].waiting_time = time - processes[i].burst_time;
                    processes[i].turnaround_time = time;
                    total_wt += processes[i].waiting_time;
                    total_tat += processes[i].turnaround_time;
                    processes[i].remaining_time = 0;
                    printf("%d   %d   %d\n", processes[i].id, processes[i].waiting_time, processes[i].turnaround_time);
                }
            }
        }
    } while (!done);

    printf("\nAvg Waiting Time: %.2f\n", (float)total_wt / n);
    printf("Avg Turnaround Time: %.2f\n", (float)total_tat / n);
}

int main() {
    int n, i, quantum;
    Process processes[MAX];

    printf("Enter number of processes: ");
    scanf("%d", &n);

    for (i = 0; i < n; i++) {
        printf("Enter Process ID, Burst Time, and Priority for process %d: ", i + 1);
        scanf("%d %d %d", &processes[i].id, &processes[i].burst_time, &processes[i].priority);
    }

    priorityScheduling(processes, n);

    printf("\nEnter time quantum for Round Robin: ");
    scanf("%d", &quantum);

    roundRobin(processes, n, quantum);

    return 0;
}
